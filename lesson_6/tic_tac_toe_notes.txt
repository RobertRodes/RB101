Notes to tic_tac_toe.rb

These notes cover places where I departed from or expanded on the solutions given in the lesson. I've organized them by referencing the code line number to which they apply.

5. FIRST_PLAYER can be configured as any of lines 1, 2 or 3.

6. If true, UNBEATABLE includes the strategy of selecting corners. (I can't say that it is really unbeatable when this strategy is included, but I haven't been able to beat it.)

15. alternate_player toggles the player on the move, stored in current_player.

23. board_line is one of the lines that has markers in it. the_line has a number from 0 to 3, which when multiplied by 3 and incremented by 1 gives the  desired row to update.

29. Algorithm for computer move is to apply these criteria in this order: 1) select a winning move, 2) prevent a winning move by the opponent, 3) select the center square, if available, 4) select a corner, if available (skip this if UNBEATABLE is false, see 6) and 5) select a random square.

48. I took a stab at writing most of this myself before following along with the video, so the initial board setup is pretty different from the solution given, putting each line into a method call. I can't say that v_line and h_line do anything to improve on simply putting the lines in, but I like the board_line method.

Also, I disabled rubocop's LineLength metric, which flagged line 53. Alternatives such as using print and breaking it into three lines, or setting the result of the ternary expression into a variable and plugging the variable into the line, don't seem to make it clearer than leaving it as is.

87. first_player_choice works out who the first player is if FIRST_PLAYER is set to PLAYER_CHOOSE. I allowed for the possibility of alternating the starting player for each game in a match as well. This ran me into a bit of a difficulty: I wanted to keep a flag called alternate_starters to determine whether the user selected this option. 

Ways to set this flag without turning alternate_starters into an instance variable seemed pretty tortuous: either pull the logic out of the method and back into the loop, set it up as something mutable, such as perhaps a string (didn't work out a way to do that successfully), and put the first_player and alternate_starters variables into a hash. 

I thought it would be clearest to put it into an instance variable, but I don't know whether this is consistent with accepted style. I couldn't find much online; in particular the style guide doesn't appear to have anything to say about instance variables outside of a class. I also don't see rubocop complaining, so I've left it this way.

101. I'm not sure that this isn't better removed, and the line of code returned to display_board.

137. I suppose I could further follow the DRY principle by working up a method and variable to determine and store the match winner, and then evaluate it both here and on line 194, but it seems a bit martinetish. After all, into each program a little rain must fall.

157. swap_first_player is used if the user has opted to alternate players between match games.

161. See 87.

163. first_player is the player who goes first; current_player is the player who is on the move. first_player is initially set in the FIRST_PLAYER constant on line 5. first_player will swap for each game if the player has opted to alternate starting players in a match.

169. BlockLength is 26, one line too long. I thought about pulling the main loop into a separate method, but it doesn't make a heck of a lot of sense to me. It only would get called in the one place, and its state is pretty tightly coupled with the outer loop, so resolving scope issues would only serve to obfuscate the code rather than clarify it. So I disabled BlockLength instead.